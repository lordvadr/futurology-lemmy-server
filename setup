#!/usr/bin/env bash

set -xeuo pipefail

sshkeys="https://github.com/lordvadr/futurology-ssh-keys.git"
gpgkeys="https://github.com/lordvadr/futurology-gpg-keys.git"
config="https://github.com/lordvadr/futurology-lemmy-server-config.git"
branch="main"
workdir="workdir"

die() {
	>&2 echo "FATAL: ${@:-UNKNOWN ERROR}"
	exit 1
}

cleanup() {
	local rv="${?}"
	[ "${rv}" == "0" ] || { >&2 echo "FATAL FATAL FATAL FATAL !!!!!! SCRIPT DID NOT EXIT CLEANLY"; }
}

last_signed_commit() {
	local dir=0
	[ -z "${2:-}" ] || [ ! -d "${2}" ] || { dir=1; pushd "${2}" > /dev/null 2>&1 || die "Could not change directory to \"${2}\"."; } 

	[ -z "${1:-}" ] || git checkout "${1}" >&2 || die "Could not checkout branch \"${1}\"."

	COMMIT=""

	for c in $(git log --pretty=format:"%H"); do
		if git verify-commit "${c}" >&2; then
			COMMIT="${c}"
			break
		else
			COMMIT=""
		fi
	done

	[ "${dir}" != "1" ] || popd > /dev/null 2>&1

	[ -n "${COMMIT}" ] && echo "${COMMIT}"
}

trap cleanup EXIT

cd /root || die "Could not change working directory to /root"

sudo dnf -y --allowerasing install dirmngr git || die "Could not install git and other tools."

gpg --import << EOF
-----BEGIN PGP PUBLIC KEY BLOCK-----

mDMEZJMXzRYJKwYBBAHaRw8BAQdAxAkZQFi5MkN0Z9mIpicIwwYx0IYe7G+B0vSG
TWIDPhq0JWxvcmR2YWRyIDxsb3JkdmFkckBmdXR1cm9sb2d5LnNvY2lhbD6ImQQT
FgoAQRYhBCWjNDHQyGfPaRmeJLHYMlRoNE1fBQJkkxfNAhsBBQkDwmcABQsJCAcC
AiICBhUKCQgLAgQWAgMBAh4HAheAAAoJELHYMlRoNE1fd1sA+gM4ORfzaYq3pdjQ
Liqje/CfO1N23OmfslVPGUoO5YGEAPsEOr2nFF2RAx8ojJU4GO7dD8vJU7cDdzuL
TvCsmAEaBw==
=HV9t
-----END PGP PUBLIC KEY BLOCK-----
EOF

echo "25A33431D0C867CF69199E24B1D8325468344D5F:6:" | gpg --import-ownertrust

gpg --keyserver keys.openpgp.org --refresh-keys

[ ! -d "${workdir}" ] && [ ! -e "${workdir}" ] || rm -rf "${workdir}" || die "Could not remove stale workdir \"${workdir}\"."

mkdir -p "${workdir}" && pushd "${workdir}" || die "Could not create and cd into working directory \"${workdir}\"."

git clone "${gpgkeys}" gpg-keys

oldcommit=""
commit="$(last_signed_commit "${branch}" gpg-keys)"
[ -n "${commit}" ] || die "No most recent signed commit in gpg keys repo."
while [ "${commit}" != "${oldcommit}" ]; do
	pushd gpg-keys
	git checkout "${commit}"
	cat *.pub | gpg --import
	popd
	oldcommit="${commit}"
	commit="$(last_signed_commit "${branch}" gpg-keys)"
done

gpg --keyserver keys.openpgp.org --refresh-keys

gpg --list-keys --with-colons | awk -F: 'c&&$1=="fpr"{print $10 ":6:"}{if($1=="pub"){c=1}else{c=0}}' | gpg --import-ownertrust

git clone "${config}" config
commit="$(last_sign_commit "${branch}" config)"
[ -n "${commit}" ] || die "No most recently signed commit in config repo."
pushd config
git checkout "${commit}"

[ -e "setup.sh" ] || die "No \"setup.sh\" script to launch."

[ -x "setup.sh" ] || die "\"setup.sh\" is not executabel."

bash -n "setup.sh" || die "\"setup.sh\" does not pass linting by bash."

exec ./setup.sh
